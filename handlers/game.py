from random import choice

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

from keyboards.game_kb import letters_kb, GameAction, restart

router = Router()


class Gallows:
    def __init__(self):
        self.words = ['–∞–∑–±—É–∫–∞', '—Ç–µ–ª–µ–≥—Ä–∞–º–º', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–≤–∏–∑–∏—Ç–µ—Ä', '–ø–∞—É–ª–∏–Ω–∞', '—Å–∞–±–ª—è']
        self.letters = [
            '–∞', '–±', '–≤', '–≥', '–¥', '–µ', '—ë', '–∂', '–∑', '–∏',
            '–π', '–∫', '–ª', '–º', '–Ω', '–æ', '–ø', '—Ä', '—Å', '—Ç',
            '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—ä', '—ã', '—å',
            '—ç', '—é', '—è'
        ]
        self.choice_letters = []
        self.lives = 10
        self.word = choice(self.words)

    def add_letter(self, letter):
        if letter in self.word:
            self.choice_letters.append(letter)
        else:
            self.lives -= 1
        self.letters.remove(letter)

    def loss(self):
        if self.lives == 0:
            return True
        return False

    def win(self):
        for letter in self.word:
            if letter not in self.choice_letters:
                return False
        return True

    def field(self):
        text_word = ''
        text_lives = ''
        field = ''
        if self.win():
            field = '–ü–æ–±–µ–¥–∞!!!\n–í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ: {word}'.format(
                word=self.word
            )
        elif self.loss():
            field = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏(\n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {word}'.format(
                word=self.word
            )
        else:
            for _ in range(self.lives):
                text_lives += 'üß°'
            for letter in self.word:
                if letter in self.choice_letters:
                    text_word += letter
                else:
                    text_word += 'üü©'
            field = '–°–ª–æ–≤–æ: {word}\n\n–ñ–∏–∑–Ω–∏: {lives}'.format(
                word=text_word,
                lives=text_lives
            )
        return field


@router.message(Command("game"))
async def cmd_game(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text='–ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π –∏–≥—Ä—ã "–í–∏—Å–µ–ª–∏—Ü–∞". –ò–≥—Ä—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ–±—É—á–∞—é—â–∏—Ö —Ü–µ–ª—è—Ö –∏–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∞–∫—Ü–∏–∏'
    )
    game = Gallows()
    await message.answer(
        text=game.field(),
        reply_markup=letters_kb(game.letters)
    )
    await state.update_data(game=game)


@router.callback_query(GameAction.filter(F.action == 'restart'))
async def cmd_game(callback: CallbackQuery, state: FSMContext):
    game = Gallows()
    await callback.message.edit_text(
        text=game.field(),
        reply_markup=letters_kb(game.letters)
    )
    await state.update_data(game=game)
    await callback.answer()


@router.callback_query(GameAction.filter(F.action == 'letter'))
async def cancel_send(callback: CallbackQuery, callback_data: GameAction, state: FSMContext):
    game_data = await state.get_data()
    game: Gallows = game_data['game']

    game.add_letter(callback_data.letter)

    if game.win() or game.loss():
        await callback.message.edit_text(
            text=game.field(),
            reply_markup=restart()
        )
        await state.clear()
    else:
        await callback.message.edit_text(
            text=game.field(),
            reply_markup=letters_kb(game.letters)
        )
        await state.update_data(game=game)
    await callback.answer()



